org: lasserfox
app: serverless-training-app
service: serverless-training-app
#variablesResolutionMode: 20210326
configValidationMode: warn

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
#  - serverless-deployment-bucket


provider:
  name: aws
  runtime: nodejs12.x
#  deploymentBucket:
#    name: Trainings-${self:provider.stage}


  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TRAININGS_TABLE: Trainings-${self:provider.stage}
    TRAININGS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: sls-training-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_JWKS: https://dev-0m8bcnovo2htzhe3.us.auth0.com/.well-known/jwks.json

  logs:
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: triatlon API
        description: SLS trainings data
    models:
      - name: CreateTrainingRequest
        contentType: application/json
        schemma: ${file(models/create-training-model.json)}
      - name: UpdateTrainingRequest
        contentType: application/json
        schema: ${file(models/update-training-model.json)}


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetAbout:
    handler: src/lambda/http/getAbout.handler
    events:
      - http:
          method: get
          path: about
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRAININGS_TABLE}

  GetTrainings:
    handler: src/lambda/http/getTrainings.handler
    events:
      - http:
          method: get
          path: trainings
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRAININGS_TABLE}

  CreateTraining:
    handler: src/lambda/http/createTraining.handler
    events:
      - http:
          method: post
          path: trainings
          cors: true
          authorizer: Auth
          reqValidatorName: 'RequestBodyValidator'
          documentation:
            summary: Create a new training item
            description: Create a new training item
            requestModels:
              'application/json': CreateTrainingRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRAININGS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*

  UpdateTraining:
    handler: src/lambda/http/updateTraining.handler
    events:
      - http:
          method: patch
          path: trainings/{trainingId}
          cors: true
          authorizer: Auth
          reqValidatorName: 'RequestBodyValidator'
          documentation:
            summary: Update a training item
            description: Update a training item
            requestModels:
              'application/json': UpdateTrainingRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRAININGS_TABLE}

  DeleteTraining:
    handler: src/lambda/http/deleteTraining.handler
    events:
      - http:
          method: delete
          path: trainings/{trainingId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRAININGS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: trainings/{trainingId}/attachment
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRAININGS_TABLE}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    # Create a DynamoDB table with local secondary index and a composite key
    TrainingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: trainingId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
#          - AttributeName: traininPlanDetails
#            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: trainingId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TRAININGS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TRAININGS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: '*'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket